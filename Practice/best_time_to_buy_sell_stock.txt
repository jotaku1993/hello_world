class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        #if there is not enough prices, return 0
        l = len(prices)
        if l <= 1:
            return 0
        #initialize the dp status
        max, min = 0, 0
        profit = 0
        if prices[0] < prices[1]:
            max, min = prices[1], prices[0]
            profit = max - min
        else:
            max, min = prices[1], prices[1]
            profit = max - min
        #begin dp
        for i in range(2, l):
            #if it keep decreasing
            if profit == 0:
                if prices[i] > min:
                    max = prices[i]
                else:
                    max, min = prices[i], prices[i]
            #if it has some profit, to calculate the new profit
            else:
                if prices[i] > max:
                    max = prices[i]
                elif prices[i] < min:
                    max, min = prices[i], prices[i]
                else:
                    pass
            #if new profit is higher, update it
            if max-min > profit:
                profit = max - min
        return profit
