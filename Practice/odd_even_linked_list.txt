# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def oddEvenList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if head is None or head.next is None:
            return head
        #build the beginning for the two sub linked lists
        nHead = ListNode(0)
        nHead.next = head
        nHead2 = ListNode(0)
        nHead2.next = head.next
        #odd and even begin from first and second element
        odd, even = head, head.next
        #build the two sub linked lists 
        while even and even.next:
            odd.next = odd.next.next
            odd = odd.next
            even.next = even.next.next
            even = even.next
        #connect the even one to the odd one
        odd.next = nHead2.next
        return nHead.next
        
