# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def isBalanced(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        #-1 means not a balanced tree
        if self.checkHeight(root) == -1:
            return False
        else:
            return True
        
    def checkHeight(self, root):
        #when come to the root, return 0
        if root is None:
            return 0
        #get the height of both subtrees and if anyone is -1, directly return -1
        left = self.checkHeight(root.left)
        if left == -1:
            return -1
        right = self.checkHeight(root.right)
        if right == -1:
            return -1
        #if both subtrees are balanced, to see if they balanced here
        #if not, return -1; if yes, return the new height by +1
        if abs(left - right) > 1:
            return -1
        else:
            return max(left, right) + 1
