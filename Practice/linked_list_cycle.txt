# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def hasCycle(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        #use fast and slow point to see if they meet again
        if head is None or head.next is None:
            return False
        fast, slow = head, head
        #just need to judge the fast
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
            #make sure that the fast id not None
            if fast:
                if slow.val == fast.val:
                    return True
        return False
