class Solution(object):
    def simplifyPath(self, path):
        """
        :type path: str
        :rtype: str
        """
        l = len(path)
        stack = []
        ans = '/'
        temp = ''
        # scan the path one by one
        for i in range(1, l):
            #to see if it is '/'
            if path[i] == '/':
                #to see if redundant '/'
                if path[i-1] == '/':
                    continue
                else:
                    #use stack to store or pop paths
                    #'..' means return
                    if temp == '..':
                        if len(stack) == 0:
                            pass
                        else:
                            stack.pop()
                    #'.' means stay the same
                    elif temp == '.':
                        pass
                    #others will be added to the path
                    else:
                        stack.append(temp)
                    temp = ''
            else:
                temp = temp + path[i]
        #to deal with the final path
        if temp == '.':
            ans = ans + '/'.join(stack)
        elif temp == '..':
            if len(stack) == 0:
                pass
            else:
                stack.pop()
                ans = ans + '/'.join(stack)
        elif temp == '':
            ans = ans + '/'.join(stack)
        else:
            if len(stack) == 0:
                ans = ans + temp
            else:
                ans = ans + '/'.join(stack) + '/' + temp
        #output the answer
        return ans
